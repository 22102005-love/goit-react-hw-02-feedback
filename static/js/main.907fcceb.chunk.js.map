{"version":3,"sources":["components/FeedbackOptions.js","components/Notification.js","components/Statistics.js","components/Section.js","App.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","map","option","data-feedback","type","onClick","Notification","message","Statistics","good","neutral","bad","total","positivePercentage","Section","title","children","App","state","handleLeaveFeedback","feedback","target","dataset","setState","prevState","countTotalFeedback","countPositivPercentage","totalFeedback","goodFeedback","Math","round","this","positivPercentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0QAceA,EAZS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAClC,OAAOD,EAAQE,KAAI,SAAAC,GAAM,OACvB,wBACEC,gBAAeD,EAEfE,KAAK,SACLC,QAASL,EAJX,SAMGE,GAJIA,OCDII,EAHM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OAAO,4BAAIA,KCYEC,EAbI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OAAOD,EAAQ,EACb,gCACE,sCAASH,KACT,yCAAYC,KACZ,qCAAQC,KACR,uCAAUC,KACV,qDAAwBC,EAAxB,UAGF,cAAC,EAAD,CAAcN,QAAQ,uBCFXO,EARC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,oCACE,6BAAKD,IACJC,MCgDQC,G,kNA/CbC,MAAQ,CACNT,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPQ,oBAAsB,YAAiB,IAE7BC,EAF4B,EAAbC,OAEKC,QAApBF,SACR,EAAKG,UAAS,SAAAC,GAAS,sBAAQJ,EAAWI,EAAUJ,GAAY,O,EAElEK,mBAAqB,WAAO,IAAD,EACM,EAAKP,MACpC,OAFyB,EACjBT,KADiB,EACXC,QADW,EACFC,K,EAGzBe,uBAAyB,WACvB,IAAMC,EAAgB,EAAKF,qBACrBG,EAAe,EAAKV,MAAMT,KAChC,OAAOoB,KAAKC,MAAsB,IAAfF,EAAsBD,I,uDAIzC,IACMf,EAAQmB,KAAKN,qBACbO,EAAoBD,KAAKL,yBAC/B,OACE,gCACE,cAAC,EAAD,CAASX,MAAM,wBAAf,SACE,cAAC,EAAD,CACEhB,QAPK,CAAC,OAAQ,UAAW,OAQzBC,gBAAiB+B,KAAKZ,wBAG1B,cAAC,EAAD,CAASJ,MAAM,aAAf,SACE,cAAC,EAAD,CACEN,KAAMsB,KAAKb,MAAMT,KACjBC,QAASqB,KAAKb,MAAMR,QACpBC,IAAKoB,KAAKb,MAAMP,IAChBC,MAAOA,EACPC,mBAAoBmB,a,GAxCdC,cCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.907fcceb.chunk.js","sourcesContent":["import PropTypes from 'prop-types';\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\n  return options.map(option => (\n    <button\n      data-feedback={option}\n      key={option}\n      type=\"button\"\n      onClick={onLeaveFeedback}\n    >\n      {option}\n    </button>\n  ));\n};\nexport default FeedbackOptions;\n\nFeedbackOptions.propTypes = {\n  options: PropTypes.array.isRequired,\n  onLeaveFeedback: PropTypes.func.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nconst Notification = ({ message }) => {\n  return <p>{message}</p>;\n};\nexport default Notification;\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import PropTypes from 'prop-types';\nimport Notification from './Notification.js';\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\n  return total > 0 ? (\n    <div>\n      <p>Good:{good}</p>\n      <p>Neutral:{neutral}</p>\n      <p>Bad:{bad}</p>\n      <p>Total:{total}</p>\n      <p>Positive percentage:{positivePercentage}%</p>\n    </div>\n  ) : (\n    <Notification message=\"No feedback given\" />\n  );\n};\nexport default Statistics;\n\nStatistics.propTypes = {\n  good: PropTypes.number.isRequired,\n  neutral: PropTypes.number.isRequired,\n  bad: PropTypes.number.isRequired,\n  total: PropTypes.number.isRequired,\n  positivePercentage: PropTypes.number.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nconst Section = ({ title, children }) => {\n  return (\n    <section>\n      <h2>{title}</h2>\n      {children}\n    </section>\n  );\n};\nexport default Section;\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.element.isRequired,\n};\n","import React, { Component } from 'react';\nimport FeedbackOptions from './components/FeedbackOptions.js';\nimport Statistics from './components/Statistics.js';\nimport Section from './components/Section.js';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  handleLeaveFeedback = ({ target }) => {\n    // console.log(event);\n    const { feedback } = target.dataset;\n    this.setState(prevState => ({ [feedback]: prevState[feedback] + 1 }));\n  };\n  countTotalFeedback = () => {\n    const { good, neutral, bad } = this.state;\n    return good + neutral + bad;\n  };\n  countPositivPercentage = () => {\n    const totalFeedback = this.countTotalFeedback();\n    const goodFeedback = this.state.good;\n    return Math.round((goodFeedback * 100) / totalFeedback);\n  };\n\n  render() {\n    const data = ['good', 'neutral', 'bad'];\n    const total = this.countTotalFeedback();\n    const positivPercentage = this.countPositivPercentage();\n    return (\n      <div>\n        <Section title=\"Please leave feedback\">\n          <FeedbackOptions\n            options={data}\n            onLeaveFeedback={this.handleLeaveFeedback}\n          ></FeedbackOptions>\n        </Section>\n        <Section title=\"Statistics\">\n          <Statistics\n            good={this.state.good}\n            neutral={this.state.neutral}\n            bad={this.state.bad}\n            total={total}\n            positivePercentage={positivPercentage}\n          ></Statistics>\n        </Section>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}